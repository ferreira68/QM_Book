###############################################################################
## Author: Antonio M. Ferreira, Ph.D.                                        ##
##         Molecular Biotechnology                                           ##
##         Hartwell Center for Bioinformatics and Biotechnology              ##
##         St. Jude Children's Research Hospital                             ##
##                                                                           ##
## Date  : 08 NOV 2006                                                       ##
##                                                                           ##
## The following routines are used to extract specific data from ECCE log    ##
## files generated by NWChem.                                                ##
###############################################################################

ECCE_StartMarker   = "begin"
ECCE_EndMarker     = "end"
ECCE_WordSeparator = "%"

EOL_char = "\n"



def ECCE_GetHOMOIndex(file,entry_list,Wfn):
    """This function returns the index of the HOMO from the
       ECCE data in file for a wavefunction of type Wfn
    """

    Occupation_list = list()
    MO_Tag = "molecular orbital occupations"

    # Note: We assume that the alpha HOMO is the highest in energy
    #       as is usually the convention
    TagLine = MO_Tag + " " + Wfn + " alpha"
    for i in entry_list:
        if TagLine.lower() in i[0].lower():
            file.seek(i[1])
            file.readline()
            Done = 0
            line = file.readline()
            while not Done:
                if line == "":
                    print ("ERROR: premature end of file")
                    sys.exit()
                line = line.strip(EOL_char)
                line = line.strip()
                numbers = line.split(" ")
                for j in numbers:
                    Occupation_list.append(float(j))
                line = file.readline()
                if ECCE_EndMarker.lower() in line.lower(): Done = 1

    HOMO_index = Occupation_list.index(0.0) - 1

    return HOMO_index


    
def ECCE_GetAtomNames(file,entry_list):
    """This function returns a list of strings containing the atom tags
       used in the NWChem run."""

    NameList = list()
    Name_Tag = "atomic tags"

    for i in entry_list:
        if Name_Tag.lower() in i[0].lower():
            file.seek(i[1])
            file.readline()
            Done = 0
            line = file.readline()
            while not Done:
                if line == "":
                    print ("ERROR: premature end of file")
                    sys.exit()
                line = line.strip(EOL_char)
                line = line.strip()
                NameList.append(line)
                line = file.readline()
                if ECCE_EndMarker.lower() in line.lower(): Done = 1

    return NameList



def ECCE_GetNuclearCharges(file,entry_list):
    """This function returns a list of nuclear charges for the atoms"""

    Charge_List = list()
    Charge_Tag = "atomic charges"

    for i in entry_list:
        if Charge_Tag.lower() in i[0].lower():
            file.seek(i[1])
            file.readline()
            Done = 0
            line = file.readline()
            while not Done:
                if line == "":
                    print ("ERROR: premature end of file")
                    sys.exit()
                line = line.strip(EOL_char)
                line = line.strip()
                numbers = line.split(" ")
                for j in numbers:
                    Charge_List.append(float(j))
                line = file.readline()
                if ECCE_EndMarker.lower() in line.lower(): Done = 1
                
    return Charge_List



def ECCE_GetAtomicCoordinates(file,entry_list):
    """This function returns a list of xyz tuples containing the atomic
       coordinates used in the NWChem calculation"""

    Coordinate_List = list()
    Coord_Tag = "cartesian coordinates"

    for i in entry_list:
        if Coord_Tag.lower() in i[0].lower():
            file.seek(i[1])
            file.readline()
            Done = 0
            line = file.readline()
            while not Done:
                if line == "":
                    print ("ERROR: premature end of file")
                    sys.exit()
                line = line.strip(EOL_char)
                line = line.strip()
                numbers = line.split(" ")
                coord_tuple = [float(numbers[0]),\
                               float(numbers[1]),\
                               float(numbers[2])]
                Coordinate_List.append(coord_tuple)
                line = file.readline()
                if ECCE_EndMarker.lower() in line.lower(): Done = 1

    return Coordinate_List



def ECCE_GetWavefunctionType(file,entry_list):
    """This function returns a string containing the wavefunction type
       used in the NWChem calculation.  Note: At present we can only
       handle dft, scr, and mp2 wavefunctions"""

    Allowed_list = list()
    for i in ("dft", "scf", "mp2"):
        Allowed_list.append(i)
    
    for i in entry_list:
        if i[0].lower() == "entry":
            file.seek(i[1])
            file.readline()
            line = file.readline()
            line = line.strip(EOL_char)
            for j in Allowed_list:
                if j.lower() in line.lower():
                    wavefunction_type = line.strip()
                    break
    
    return wavefunction_type

        

def ECCE_GetMullikenCharges(file,entry_list):
    """This function returns a list of floats containing the atomic
       charges computed by the NWChem run"""

    ChargeList = list()
    Charge_Tag = "total mulliken atomic charges"

    local_list = entry_list[:]
    local_list.reverse()

    for i in local_list:
        if Charge_Tag.lower() in i[0].lower():
            file.seek(i[1])
            file.readline()
            Done = 0
            line = file.readline()
            while not Done:
                if line == "":
                    print ("ERROR: premature end of file")
                    sys.exit()
                line = line.strip(EOL_char)
                line = line.strip()
                numbers = line.split(" ")
                for j in numbers:
                    ChargeList.append(float(j))
                line = file.readline()
                if ECCE_EndMarker.lower() in line.lower(): Done = 1

    return ChargeList



def ECCE_GetMOEnergies(file,entry_list,Wfn):
    """This function returns a list of floats containing the MO energies
       from the ECCE data in file for a wavefunction of type Wfn
    """

    E_list = list()
    MO_Tag = "molecular orbital energies"

    TagLine = MO_Tag + " " + Wfn
    for i in entry_list:
        if TagLine.lower() in i[0].lower():
            file.seek(i[1])
            file.readline()
            Done = 0
            line = file.readline()
            while not Done:
                if line == "":
                    print ("ERROR: premature end of file")
                    sys.exit()
                line = line.strip(EOL_char)
                line = line.strip()
                numbers = line.split(" ")
                for j in numbers:
                    E_list.append(float(j))
                line = file.readline()
                if ECCE_EndMarker.lower() in line.lower(): Done = 1

    return E_list



def ECCE_TaskList(sections,file):
    """This function parses the ECCE output in file and returns a list
    containing the list entries in the file using sections as a
    reference.  (sections should be of the form generated by
    ECCE_FindSections.)  These are usually, though not necessarily,
    just the tasks performed during a particular calculation.  It
    returns a list containing elements of the form:
    [entry_name,filepos] """

    EntryList = list()
    WordSeparator = ECCE_WordSeparator
    EntryStart = "entry"

    for i in sections:
        if i[0].lower() == EntryStart.lower():
            file.seek(i[1])
            line = file.readline()
            words = line.split(WordSeparator)
            numlines = int(words[3])
            file_pos = file.tell()
            line = ""
            for j in range(numlines):
                line = line + file.readline()
            line = line.strip(EOL_char)
            entry_name = line.strip()
            EntryList.append([entry_name,file_pos])

    return EntryList


def ECCE_FindSections(file,prefix="",offset=0):
    """This function parses the ECCE output in file and returns
       a list containing elements of the form:
       [section_name,filepos,type]
    """
    SectionList = list()
    SectionStart  = ECCE_StartMarker
    WordSeparator = ECCE_WordSeparator
    SectionMarker = prefix + WordSeparator + SectionStart
    file.seek(offset)
    file_pos = file.tell()
    line = file.readline()
    while line != "":
        if line.startswith(SectionMarker):
            line = line.strip(EOL_char)
            words = line.split(WordSeparator)
            section_name = words[2]
            type = words[4]
            SectionList.append([section_name,file_pos,type])
        file_pos = file.tell()
        line = file.readline()
    return SectionList



def ECCE_RunTitle(section_info,ECCE_file):
    """This function takes a list of the input sections of the form
    returned by ECCE_FindSections and returns the run title given in
    the original input deck as a string """

    seek_string = "Title"
    dquote = "\""
    squote = "\'"
    EOL    = "\n"
    
    for i in section_info:
        if i[0] == "input file":
            ECCE_file.seek(i[1])
            break

    FoundTitle = 0
    while not FoundTitle:
        TitleLine = ECCE_file.readline()
        if seek_string.lower() in TitleLine.lower():
            FoundTitle = 1
    
    str_start = TitleLine.lower().find(seek_string.lower())
    str_end   = str_start + len(seek_string) + 1
    RunTitle  = TitleLine[str_end:]

    seek_char = ""
    if dquote in RunTitle:
        if squote in RunTitle:
            dquote_pos = RunTitle.find(dquote)
            sqoute_pos = RunTitle.find(squote)
            if dquote_pos < squote_pos:
                seek_char = dquote
            else:
                seek_char = squote
        else:
            seek_char = dquote
    elif squote in RunTitle:
        seek_char = squote
        
    RunTitle = RunTitle.strip(EOL)
    RunTitle = RunTitle.strip()
    RunTitle = RunTitle.strip(seek_char)
    
    return RunTitle
